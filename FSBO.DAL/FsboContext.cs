

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "FSBO.DAL\App.config"
//     Connection String Name: "FsboContext"
//     Connection String:      "data source=.\XYZ;initial catalog=FSBO;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace FSBO.DAL
{
    using System.Linq;

    #region Unit of work

    public interface IFsboContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Area> Areas { get; set; } // Area
        System.Data.Entity.DbSet<AreaType> AreaTypes { get; set; } // AreaType
        System.Data.Entity.DbSet<DisqualificationType> DisqualificationTypes { get; set; } // DisqualificationType
        System.Data.Entity.DbSet<RecordDisqualification> RecordDisqualifications { get; set; } // RecordDisqualification
        System.Data.Entity.DbSet<ScrapeAction> ScrapeActions { get; set; } // ScrapeAction
        System.Data.Entity.DbSet<ScrapeActionType> ScrapeActionTypes { get; set; } // ScrapeActionType
        System.Data.Entity.DbSet<ScrapeEvent> ScrapeEvents { get; set; } // ScrapeEvent
        System.Data.Entity.DbSet<ScrapeRecord> ScrapeRecords { get; set; } // ScrapeRecord
        System.Data.Entity.DbSet<SetupAction> SetupActions { get; set; } // SetupAction
        System.Data.Entity.DbSet<Source> Sources { get; set; } // Source
        System.Data.Entity.DbSet<SourceAreaEntry> SourceAreaEntries { get; set; } // SourceAreaEntry
        System.Data.Entity.DbSet<Subscriber> Subscribers { get; set; } // Subscriber
        System.Data.Entity.DbSet<TargetField> TargetFields { get; set; } // TargetField
        System.Data.Entity.DbSet<TargetFieldType> TargetFieldTypes { get; set; } // TargetFieldType
        System.Data.Entity.DbSet<TargetValue> TargetValues { get; set; } // TargetValue
        System.Data.Entity.DbSet<Template> Templates { get; set; } // Template
        System.Data.Entity.DbSet<TemplateField> TemplateFields { get; set; } // TemplateField
        System.Data.Entity.DbSet<User> Users { get; set; } // User
        System.Data.Entity.DbSet<UserArea> UserAreas { get; set; } // UserArea
        System.Data.Entity.DbSet<UserPaymentMethod> UserPaymentMethods { get; set; } // UserPaymentMethod
        System.Data.Entity.DbSet<UserSuggestion> UserSuggestions { get; set; } // UserSuggestion

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class FsboContext : System.Data.Entity.DbContext, IFsboContext
    {
        public System.Data.Entity.DbSet<Area> Areas { get; set; } // Area
        public System.Data.Entity.DbSet<AreaType> AreaTypes { get; set; } // AreaType
        public System.Data.Entity.DbSet<DisqualificationType> DisqualificationTypes { get; set; } // DisqualificationType
        public System.Data.Entity.DbSet<RecordDisqualification> RecordDisqualifications { get; set; } // RecordDisqualification
        public System.Data.Entity.DbSet<ScrapeAction> ScrapeActions { get; set; } // ScrapeAction
        public System.Data.Entity.DbSet<ScrapeActionType> ScrapeActionTypes { get; set; } // ScrapeActionType
        public System.Data.Entity.DbSet<ScrapeEvent> ScrapeEvents { get; set; } // ScrapeEvent
        public System.Data.Entity.DbSet<ScrapeRecord> ScrapeRecords { get; set; } // ScrapeRecord
        public System.Data.Entity.DbSet<SetupAction> SetupActions { get; set; } // SetupAction
        public System.Data.Entity.DbSet<Source> Sources { get; set; } // Source
        public System.Data.Entity.DbSet<SourceAreaEntry> SourceAreaEntries { get; set; } // SourceAreaEntry
        public System.Data.Entity.DbSet<Subscriber> Subscribers { get; set; } // Subscriber
        public System.Data.Entity.DbSet<TargetField> TargetFields { get; set; } // TargetField
        public System.Data.Entity.DbSet<TargetFieldType> TargetFieldTypes { get; set; } // TargetFieldType
        public System.Data.Entity.DbSet<TargetValue> TargetValues { get; set; } // TargetValue
        public System.Data.Entity.DbSet<Template> Templates { get; set; } // Template
        public System.Data.Entity.DbSet<TemplateField> TemplateFields { get; set; } // TemplateField
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<UserArea> UserAreas { get; set; } // UserArea
        public System.Data.Entity.DbSet<UserPaymentMethod> UserPaymentMethods { get; set; } // UserPaymentMethod
        public System.Data.Entity.DbSet<UserSuggestion> UserSuggestions { get; set; } // UserSuggestion

        static FsboContext()
        {
            System.Data.Entity.Database.SetInitializer<FsboContext>(null);
        }

        public FsboContext()
            : base("Name=FsboContext")
        {
        }

        public FsboContext(string connectionString)
            : base(connectionString)
        {
        }

        public FsboContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public FsboContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public FsboContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AreaConfiguration());
            modelBuilder.Configurations.Add(new AreaTypeConfiguration());
            modelBuilder.Configurations.Add(new DisqualificationTypeConfiguration());
            modelBuilder.Configurations.Add(new RecordDisqualificationConfiguration());
            modelBuilder.Configurations.Add(new ScrapeActionConfiguration());
            modelBuilder.Configurations.Add(new ScrapeActionTypeConfiguration());
            modelBuilder.Configurations.Add(new ScrapeEventConfiguration());
            modelBuilder.Configurations.Add(new ScrapeRecordConfiguration());
            modelBuilder.Configurations.Add(new SetupActionConfiguration());
            modelBuilder.Configurations.Add(new SourceConfiguration());
            modelBuilder.Configurations.Add(new SourceAreaEntryConfiguration());
            modelBuilder.Configurations.Add(new SubscriberConfiguration());
            modelBuilder.Configurations.Add(new TargetFieldConfiguration());
            modelBuilder.Configurations.Add(new TargetFieldTypeConfiguration());
            modelBuilder.Configurations.Add(new TargetValueConfiguration());
            modelBuilder.Configurations.Add(new TemplateConfiguration());
            modelBuilder.Configurations.Add(new TemplateFieldConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserAreaConfiguration());
            modelBuilder.Configurations.Add(new UserPaymentMethodConfiguration());
            modelBuilder.Configurations.Add(new UserSuggestionConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AreaConfiguration(schema));
            modelBuilder.Configurations.Add(new AreaTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new DisqualificationTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RecordDisqualificationConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapeActionConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapeActionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapeEventConfiguration(schema));
            modelBuilder.Configurations.Add(new ScrapeRecordConfiguration(schema));
            modelBuilder.Configurations.Add(new SetupActionConfiguration(schema));
            modelBuilder.Configurations.Add(new SourceConfiguration(schema));
            modelBuilder.Configurations.Add(new SourceAreaEntryConfiguration(schema));
            modelBuilder.Configurations.Add(new SubscriberConfiguration(schema));
            modelBuilder.Configurations.Add(new TargetFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new TargetFieldTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TargetValueConfiguration(schema));
            modelBuilder.Configurations.Add(new TemplateConfiguration(schema));
            modelBuilder.Configurations.Add(new TemplateFieldConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserAreaConfiguration(schema));
            modelBuilder.Configurations.Add(new UserPaymentMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSuggestionConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class FakeFsboContext : IFsboContext
    {
        public System.Data.Entity.DbSet<Area> Areas { get; set; }
        public System.Data.Entity.DbSet<AreaType> AreaTypes { get; set; }
        public System.Data.Entity.DbSet<DisqualificationType> DisqualificationTypes { get; set; }
        public System.Data.Entity.DbSet<RecordDisqualification> RecordDisqualifications { get; set; }
        public System.Data.Entity.DbSet<ScrapeAction> ScrapeActions { get; set; }
        public System.Data.Entity.DbSet<ScrapeActionType> ScrapeActionTypes { get; set; }
        public System.Data.Entity.DbSet<ScrapeEvent> ScrapeEvents { get; set; }
        public System.Data.Entity.DbSet<ScrapeRecord> ScrapeRecords { get; set; }
        public System.Data.Entity.DbSet<SetupAction> SetupActions { get; set; }
        public System.Data.Entity.DbSet<Source> Sources { get; set; }
        public System.Data.Entity.DbSet<SourceAreaEntry> SourceAreaEntries { get; set; }
        public System.Data.Entity.DbSet<Subscriber> Subscribers { get; set; }
        public System.Data.Entity.DbSet<TargetField> TargetFields { get; set; }
        public System.Data.Entity.DbSet<TargetFieldType> TargetFieldTypes { get; set; }
        public System.Data.Entity.DbSet<TargetValue> TargetValues { get; set; }
        public System.Data.Entity.DbSet<Template> Templates { get; set; }
        public System.Data.Entity.DbSet<TemplateField> TemplateFields { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserArea> UserAreas { get; set; }
        public System.Data.Entity.DbSet<UserPaymentMethod> UserPaymentMethods { get; set; }
        public System.Data.Entity.DbSet<UserSuggestion> UserSuggestions { get; set; }

        public FakeFsboContext()
        {
            Areas = new FakeDbSet<Area>("AreaId");
            AreaTypes = new FakeDbSet<AreaType>("AreaTypeId");
            DisqualificationTypes = new FakeDbSet<DisqualificationType>("DisqualificationTypeId");
            RecordDisqualifications = new FakeDbSet<RecordDisqualification>("DisqualificationId");
            ScrapeActions = new FakeDbSet<ScrapeAction>("ActionId");
            ScrapeActionTypes = new FakeDbSet<ScrapeActionType>("ActionTypeId");
            ScrapeEvents = new FakeDbSet<ScrapeEvent>("EventId");
            ScrapeRecords = new FakeDbSet<ScrapeRecord>("RecordId");
            SetupActions = new FakeDbSet<SetupAction>("SetupActionId");
            Sources = new FakeDbSet<Source>("SourceId");
            SourceAreaEntries = new FakeDbSet<SourceAreaEntry>("SourceId", "AreaId");
            Subscribers = new FakeDbSet<Subscriber>("SubscriberId");
            TargetFields = new FakeDbSet<TargetField>("TargetId");
            TargetFieldTypes = new FakeDbSet<TargetFieldType>("FieldTypeId");
            TargetValues = new FakeDbSet<TargetValue>("ValueId");
            Templates = new FakeDbSet<Template>("TemplateId");
            TemplateFields = new FakeDbSet<TemplateField>("TemplateFieldId");
            Users = new FakeDbSet<User>("UserId");
            UserAreas = new FakeDbSet<UserArea>("UserAreaId");
            UserPaymentMethods = new FakeDbSet<UserPaymentMethod>("UserPaymentMethodId");
            UserSuggestions = new FakeDbSet<UserSuggestion>("UserSuggestionId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        public System.Data.Entity.Database Database { get; }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Area
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class Area
    {
        public int AreaId { get; set; } // AreaId (Primary key)
        public int AreaTypeId { get; set; } // AreaTypeId
        public string Value { get; set; } // Value (length: 255)
        public System.DateTimeOffset? ApprovedOn { get; set; } // ApprovedOn
        public int? UserSuggestionId { get; set; } // UserSuggestionId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ScrapeEvent> ScrapeEvents { get; set; } // ScrapeEvent.FK_ScrapeEvent_AreaId
        public virtual System.Collections.Generic.ICollection<SourceAreaEntry> SourceAreaEntries { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<UserArea> UserAreas { get; set; } // UserArea.FK_UserArea_AreaId

        // Foreign keys
        public virtual AreaType AreaType { get; set; } // FK_Area_AreaTypeId
        public virtual UserSuggestion UserSuggestion { get; set; } // FK_Area_UserSuggestionId

        public Area()
        {
            ScrapeEvents = new System.Collections.Generic.List<ScrapeEvent>();
            SourceAreaEntries = new System.Collections.Generic.List<SourceAreaEntry>();
            UserAreas = new System.Collections.Generic.List<UserArea>();
        }
    }

    // AreaType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class AreaType
    {
        public int AreaTypeId { get; set; } // AreaTypeId (Primary key)
        public string Name { get; set; } // Name (length: 255)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Area> Areas { get; set; } // Area.FK_Area_AreaTypeId

        public AreaType()
        {
            Areas = new System.Collections.Generic.List<Area>();
        }
    }

    // DisqualificationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class DisqualificationType
    {
        public int DisqualificationTypeId { get; set; } // DisqualificationTypeId (Primary key)
        public string Name { get; set; } // Name (length: 100)
    }

    // RecordDisqualification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class RecordDisqualification
    {
        public int DisqualificationId { get; set; } // DisqualificationId (Primary key)
        public int TemplateId { get; set; } // TemplateId
        public int DisqualificationTypeId { get; set; } // DisqualificationTypeId
        public string Parameters { get; set; } // Parameters

        // Foreign keys
        public virtual Template Template { get; set; } // FK_RecordDisqualifier_TemplateId
    }

    // ScrapeAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeAction
    {
        public int ActionId { get; set; } // ActionId (Primary key)
        public int? TemplateFieldId { get; set; } // TemplateFieldId
        public int ActionTypeId { get; set; } // ActionTypeId
        public int OrderIndex { get; set; } // OrderIndex
        public string Parameters { get; set; } // Parameters

        // Foreign keys
        public virtual ScrapeActionType ScrapeActionType { get; set; } // FK_ScrapeAction_ActionTypeId
        public virtual TemplateField TemplateField { get; set; } // FK_ScrapeAction_TemplateFieldId
    }

    // ScrapeActionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeActionType
    {
        public int ActionTypeId { get; set; } // ActionTypeId (Primary key)
        public string Name { get; set; } // Name (length: 128)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ScrapeAction> ScrapeActions { get; set; } // ScrapeAction.FK_ScrapeAction_ActionTypeId
        public virtual System.Collections.Generic.ICollection<SetupAction> SetupActions { get; set; } // SetupAction.FK_SetupAction_ActionTypeId

        public ScrapeActionType()
        {
            ScrapeActions = new System.Collections.Generic.List<ScrapeAction>();
            SetupActions = new System.Collections.Generic.List<SetupAction>();
        }
    }

    // ScrapeEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeEvent
    {
        public int EventId { get; set; } // EventId (Primary key)
        public int AreaId { get; set; } // AreaId
        public int TemplateId { get; set; } // TemplateId
        public System.DateTimeOffset TimeStamp { get; set; } // TimeStamp

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ScrapeRecord> ScrapeRecords { get; set; } // ScrapeRecord.FK_FieldValue_EventId

        // Foreign keys
        public virtual Area Area { get; set; } // FK_ScrapeEvent_AreaId
        public virtual Template Template { get; set; } // FK_ScrapeEvent_TemplateId

        public ScrapeEvent()
        {
            TimeStamp = System.DateTimeOffset.Now;
            ScrapeRecords = new System.Collections.Generic.List<ScrapeRecord>();
        }
    }

    // ScrapeRecord
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeRecord
    {
        public int RecordId { get; set; } // RecordId (Primary key)
        public int EventId { get; set; } // EventId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TargetValue> TargetValues { get; set; } // TargetValue.FK_FieldValue_RecordId

        // Foreign keys
        public virtual ScrapeEvent ScrapeEvent { get; set; } // FK_FieldValue_EventId

        public ScrapeRecord()
        {
            TargetValues = new System.Collections.Generic.List<TargetValue>();
        }
    }

    // SetupAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class SetupAction
    {
        public int SetupActionId { get; set; } // SetupActionId (Primary key)
        public int TemplateId { get; set; } // TemplateId
        public int ActionTypeId { get; set; } // ActionTypeId
        public int OrderIndex { get; set; } // OrderIndex
        public string Parameters { get; set; } // Parameters

        // Foreign keys
        public virtual ScrapeActionType ScrapeActionType { get; set; } // FK_SetupAction_ActionTypeId
        public virtual Template Template { get; set; } // FK_SetupAction_TemplateId
    }

    // Source
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class Source
    {
        public int SourceId { get; set; } // SourceId (Primary key)
        public string HeadUri { get; set; } // HeadUri (length: 54)
        public bool IsConfirmed { get; set; } // IsConfirmed
        public System.DateTimeOffset AddedOn { get; set; } // AddedOn

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<SourceAreaEntry> SourceAreaEntries { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Template> Templates { get; set; } // Template.FK_Template_SourceId

        public Source()
        {
            SourceAreaEntries = new System.Collections.Generic.List<SourceAreaEntry>();
            Templates = new System.Collections.Generic.List<Template>();
        }
    }

    // SourceAreaEntry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class SourceAreaEntry
    {
        public int SourceId { get; set; } // SourceId (Primary key)
        public int AreaId { get; set; } // AreaId (Primary key)
        public string EntryPoint { get; set; } // EntryPoint
        public string SourceUriOverride { get; set; } // SourceUriOverride (length: 1024)

        // Foreign keys
        public virtual Area Area { get; set; } // FK_SourceAreaEntry_AreaId
        public virtual Source Source { get; set; } // FK_SourceAreaEntry_SourceId
    }

    // Subscriber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class Subscriber
    {
        public int SubscriberId { get; set; } // SubscriberId (Primary key)
        public string Name { get; set; } // Name (length: 128)
        public string Email { get; set; } // Email (length: 254)
        public bool IsActive { get; set; } // IsActive

        public Subscriber()
        {
            IsActive = false;
        }
    }

    // TargetField
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TargetField
    {
        public int TargetId { get; set; } // TargetId (Primary key)
        public string Name { get; set; } // Name (length: 64)
        public int FieldTypeId { get; set; } // FieldTypeId
        public bool IsTemporaryField { get; set; } // IsTemporaryField

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TargetValue> TargetValues { get; set; } // TargetValue.FK_FieldValue_TargetId
        public virtual System.Collections.Generic.ICollection<TemplateField> TemplateFields { get; set; } // TemplateField.FK_TemplateField_TargetId

        // Foreign keys
        public virtual TargetFieldType TargetFieldType { get; set; } // FK_TargetField_FieldTypeId

        public TargetField()
        {
            IsTemporaryField = false;
            TargetValues = new System.Collections.Generic.List<TargetValue>();
            TemplateFields = new System.Collections.Generic.List<TemplateField>();
        }
    }

    // TargetFieldType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TargetFieldType
    {
        public int FieldTypeId { get; set; } // FieldTypeId (Primary key)
        public string Name { get; set; } // Name (length: 32)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TargetField> TargetFields { get; set; } // TargetField.FK_TargetField_FieldTypeId

        public TargetFieldType()
        {
            TargetFields = new System.Collections.Generic.List<TargetField>();
        }
    }

    // TargetValue
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TargetValue
    {
        public int ValueId { get; set; } // ValueId (Primary key)
        public int RecordId { get; set; } // RecordId
        public int TargetId { get; set; } // TargetId
        public string Value { get; set; } // Value

        // Foreign keys
        public virtual ScrapeRecord ScrapeRecord { get; set; } // FK_FieldValue_RecordId
        public virtual TargetField TargetField { get; set; } // FK_FieldValue_TargetId
    }

    // Template
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class Template
    {
        public int TemplateId { get; set; } // TemplateId (Primary key)
        public int SourceId { get; set; } // SourceId
        public string Name { get; set; } // Name (length: 128)
        public bool IsTopLevel { get; set; } // IsTopLevel

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<RecordDisqualification> RecordDisqualifications { get; set; } // RecordDisqualification.FK_RecordDisqualifier_TemplateId
        public virtual System.Collections.Generic.ICollection<ScrapeEvent> ScrapeEvents { get; set; } // ScrapeEvent.FK_ScrapeEvent_TemplateId
        public virtual System.Collections.Generic.ICollection<SetupAction> SetupActions { get; set; } // SetupAction.FK_SetupAction_TemplateId
        public virtual System.Collections.Generic.ICollection<Template> Parent { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Template> Templates_TemplateId { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<TemplateField> TemplateFields { get; set; } // TemplateField.FK_TemplateField_TemplateId

        // Foreign keys
        public virtual Source Source { get; set; } // FK_Template_SourceId

        public Template()
        {
            IsTopLevel = false;
            RecordDisqualifications = new System.Collections.Generic.List<RecordDisqualification>();
            ScrapeEvents = new System.Collections.Generic.List<ScrapeEvent>();
            SetupActions = new System.Collections.Generic.List<SetupAction>();
            TemplateFields = new System.Collections.Generic.List<TemplateField>();
            Parent = new System.Collections.Generic.List<Template>();
            Templates_TemplateId = new System.Collections.Generic.List<Template>();
        }
    }

    // TemplateField
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TemplateField
    {
        public int TemplateFieldId { get; set; } // TemplateFieldId (Primary key)
        public int TemplateId { get; set; } // TemplateId
        public int TargetId { get; set; } // TargetId
        public int OrderIndex { get; set; } // OrderIndex

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ScrapeAction> ScrapeActions { get; set; } // ScrapeAction.FK_ScrapeAction_TemplateFieldId

        // Foreign keys
        public virtual TargetField TargetField { get; set; } // FK_TemplateField_TargetId
        public virtual Template Template { get; set; } // FK_TemplateField_TemplateId

        public TemplateField()
        {
            ScrapeActions = new System.Collections.Generic.List<ScrapeAction>();
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string Username { get; set; } // Username (length: 32)
        public byte[] Hash { get; set; } // Hash (length: 64)
        public byte[] Salt { get; set; } // Salt (length: 128)
        public string Email { get; set; } // Email (length: 254)
        public string Phone { get; set; } // Phone (length: 13)
        public byte DayToCharge { get; set; } // DayToCharge
        public int? CurrentPaymentMethodId { get; set; } // CurrentPaymentMethodId

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<UserArea> UserAreas { get; set; } // UserArea.FK_UserArea_UserId
        public virtual System.Collections.Generic.ICollection<UserPaymentMethod> UserPaymentMethods { get; set; } // UserPaymentMethod.FK_UserPaymentMethod_UserId
        public virtual System.Collections.Generic.ICollection<UserSuggestion> UserSuggestions { get; set; } // UserSuggestion.FK_UserSuggestion_UserId

        // Foreign keys
        public virtual UserPaymentMethod UserPaymentMethod { get; set; } // FK_User_CurrentPaymentMethodId

        public User()
        {
            UserAreas = new System.Collections.Generic.List<UserArea>();
            UserPaymentMethods = new System.Collections.Generic.List<UserPaymentMethod>();
            UserSuggestions = new System.Collections.Generic.List<UserSuggestion>();
        }
    }

    // UserArea
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserArea
    {
        public int UserAreaId { get; set; } // UserAreaId (Primary key)
        public int UserId { get; set; } // UserId
        public int AreaId { get; set; } // AreaId
        public System.DateTimeOffset AddedOn { get; set; } // AddedOn

        // Foreign keys
        public virtual Area Area { get; set; } // FK_UserArea_AreaId
        public virtual User User { get; set; } // FK_UserArea_UserId

        public UserArea()
        {
            AddedOn = System.DateTimeOffset.Now;
        }
    }

    // UserPaymentMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserPaymentMethod
    {
        public int UserPaymentMethodId { get; set; } // UserPaymentMethodId (Primary key)
        public int UserId { get; set; } // UserId
        public string Name { get; set; } // Name (length: 128)
        public string NameOnCard { get; set; } // NameOnCard (length: 128)
        public string CreditCardNumber { get; set; } // CreditCardNumber (length: 16)
        public byte ExpMonth { get; set; } // ExpMonth
        public short ExpYear { get; set; } // ExpYear

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // User.FK_User_CurrentPaymentMethodId

        // Foreign keys
        public virtual User User { get; set; } // FK_UserPaymentMethod_UserId

        public UserPaymentMethod()
        {
            Users = new System.Collections.Generic.List<User>();
        }
    }

    // UserSuggestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserSuggestion
    {
        public int UserSuggestionId { get; set; } // UserSuggestionId (Primary key)
        public int UserId { get; set; } // UserId
        public int ZipCode { get; set; } // ZipCode
        public System.DateTimeOffset SuggestedOn { get; set; } // SuggestedOn
        public System.DateTimeOffset? FulfilledOn { get; set; } // FulfilledOn

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Area> Areas { get; set; } // Area.FK_Area_UserSuggestionId

        // Foreign keys
        public virtual User User { get; set; } // FK_UserSuggestion_UserId

        public UserSuggestion()
        {
            SuggestedOn = System.DateTimeOffset.Now;
            Areas = new System.Collections.Generic.List<Area>();
        }
    }

    #endregion

    #region POCO Configuration

    // Area
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class AreaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Area>
    {
        public AreaConfiguration()
            : this("dbo")
        {
        }

        public AreaConfiguration(string schema)
        {
            ToTable("Area", schema);
            HasKey(x => x.AreaId);

            Property(x => x.AreaId).HasColumnName(@"AreaId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AreaTypeId).HasColumnName(@"AreaTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.ApprovedOn).HasColumnName(@"ApprovedOn").HasColumnType("datetimeoffset").IsOptional();
            Property(x => x.UserSuggestionId).HasColumnName(@"UserSuggestionId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.UserSuggestion).WithMany(b => b.Areas).HasForeignKey(c => c.UserSuggestionId).WillCascadeOnDelete(false); // FK_Area_UserSuggestionId
            HasRequired(a => a.AreaType).WithMany(b => b.Areas).HasForeignKey(c => c.AreaTypeId).WillCascadeOnDelete(false); // FK_Area_AreaTypeId
        }
    }

    // AreaType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class AreaTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AreaType>
    {
        public AreaTypeConfiguration()
            : this("dbo")
        {
        }

        public AreaTypeConfiguration(string schema)
        {
            ToTable("AreaType", schema);
            HasKey(x => x.AreaTypeId);

            Property(x => x.AreaTypeId).HasColumnName(@"AreaTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
        }
    }

    // DisqualificationType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class DisqualificationTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DisqualificationType>
    {
        public DisqualificationTypeConfiguration()
            : this("dbo")
        {
        }

        public DisqualificationTypeConfiguration(string schema)
        {
            ToTable("DisqualificationType", schema);
            HasKey(x => x.DisqualificationTypeId);

            Property(x => x.DisqualificationTypeId).HasColumnName(@"DisqualificationTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
        }
    }

    // RecordDisqualification
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class RecordDisqualificationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RecordDisqualification>
    {
        public RecordDisqualificationConfiguration()
            : this("dbo")
        {
        }

        public RecordDisqualificationConfiguration(string schema)
        {
            ToTable("RecordDisqualification", schema);
            HasKey(x => x.DisqualificationId);

            Property(x => x.DisqualificationId).HasColumnName(@"DisqualificationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TemplateId).HasColumnName(@"TemplateId").HasColumnType("int").IsRequired();
            Property(x => x.DisqualificationTypeId).HasColumnName(@"DisqualificationTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Parameters).HasColumnName(@"Parameters").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.Template).WithMany(b => b.RecordDisqualifications).HasForeignKey(c => c.TemplateId).WillCascadeOnDelete(false); // FK_RecordDisqualifier_TemplateId
        }
    }

    // ScrapeAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeActionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrapeAction>
    {
        public ScrapeActionConfiguration()
            : this("dbo")
        {
        }

        public ScrapeActionConfiguration(string schema)
        {
            ToTable("ScrapeAction", schema);
            HasKey(x => x.ActionId);

            Property(x => x.ActionId).HasColumnName(@"ActionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TemplateFieldId).HasColumnName(@"TemplateFieldId").HasColumnType("int").IsOptional();
            Property(x => x.ActionTypeId).HasColumnName(@"ActionTypeId").HasColumnType("int").IsRequired();
            Property(x => x.OrderIndex).HasColumnName(@"OrderIndex").HasColumnType("int").IsRequired();
            Property(x => x.Parameters).HasColumnName(@"Parameters").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.TemplateField).WithMany(b => b.ScrapeActions).HasForeignKey(c => c.TemplateFieldId).WillCascadeOnDelete(false); // FK_ScrapeAction_TemplateFieldId
            HasRequired(a => a.ScrapeActionType).WithMany(b => b.ScrapeActions).HasForeignKey(c => c.ActionTypeId).WillCascadeOnDelete(false); // FK_ScrapeAction_ActionTypeId
        }
    }

    // ScrapeActionType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeActionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrapeActionType>
    {
        public ScrapeActionTypeConfiguration()
            : this("dbo")
        {
        }

        public ScrapeActionTypeConfiguration(string schema)
        {
            ToTable("ScrapeActionType", schema);
            HasKey(x => x.ActionTypeId);

            Property(x => x.ActionTypeId).HasColumnName(@"ActionTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(128);
        }
    }

    // ScrapeEvent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrapeEvent>
    {
        public ScrapeEventConfiguration()
            : this("dbo")
        {
        }

        public ScrapeEventConfiguration(string schema)
        {
            ToTable("ScrapeEvent", schema);
            HasKey(x => x.EventId);

            Property(x => x.EventId).HasColumnName(@"EventId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AreaId).HasColumnName(@"AreaId").HasColumnType("int").IsRequired();
            Property(x => x.TemplateId).HasColumnName(@"TemplateId").HasColumnType("int").IsRequired();
            Property(x => x.TimeStamp).HasColumnName(@"TimeStamp").HasColumnType("datetimeoffset").IsRequired();

            // Foreign keys
            HasRequired(a => a.Area).WithMany(b => b.ScrapeEvents).HasForeignKey(c => c.AreaId).WillCascadeOnDelete(false); // FK_ScrapeEvent_AreaId
            HasRequired(a => a.Template).WithMany(b => b.ScrapeEvents).HasForeignKey(c => c.TemplateId).WillCascadeOnDelete(false); // FK_ScrapeEvent_TemplateId
        }
    }

    // ScrapeRecord
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class ScrapeRecordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScrapeRecord>
    {
        public ScrapeRecordConfiguration()
            : this("dbo")
        {
        }

        public ScrapeRecordConfiguration(string schema)
        {
            ToTable("ScrapeRecord", schema);
            HasKey(x => x.RecordId);

            Property(x => x.RecordId).HasColumnName(@"RecordId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EventId).HasColumnName(@"EventId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.ScrapeEvent).WithMany(b => b.ScrapeRecords).HasForeignKey(c => c.EventId).WillCascadeOnDelete(false); // FK_FieldValue_EventId
        }
    }

    // SetupAction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class SetupActionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SetupAction>
    {
        public SetupActionConfiguration()
            : this("dbo")
        {
        }

        public SetupActionConfiguration(string schema)
        {
            ToTable("SetupAction", schema);
            HasKey(x => x.SetupActionId);

            Property(x => x.SetupActionId).HasColumnName(@"SetupActionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TemplateId).HasColumnName(@"TemplateId").HasColumnType("int").IsRequired();
            Property(x => x.ActionTypeId).HasColumnName(@"ActionTypeId").HasColumnType("int").IsRequired();
            Property(x => x.OrderIndex).HasColumnName(@"OrderIndex").HasColumnType("int").IsRequired();
            Property(x => x.Parameters).HasColumnName(@"Parameters").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasRequired(a => a.ScrapeActionType).WithMany(b => b.SetupActions).HasForeignKey(c => c.ActionTypeId).WillCascadeOnDelete(false); // FK_SetupAction_ActionTypeId
            HasRequired(a => a.Template).WithMany(b => b.SetupActions).HasForeignKey(c => c.TemplateId).WillCascadeOnDelete(false); // FK_SetupAction_TemplateId
        }
    }

    // Source
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class SourceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Source>
    {
        public SourceConfiguration()
            : this("dbo")
        {
        }

        public SourceConfiguration(string schema)
        {
            ToTable("Source", schema);
            HasKey(x => x.SourceId);

            Property(x => x.SourceId).HasColumnName(@"SourceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.HeadUri).HasColumnName(@"HeadUri").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(54);
            Property(x => x.IsConfirmed).HasColumnName(@"IsConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.AddedOn).HasColumnName(@"AddedOn").HasColumnType("datetimeoffset").IsRequired();
        }
    }

    // SourceAreaEntry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class SourceAreaEntryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SourceAreaEntry>
    {
        public SourceAreaEntryConfiguration()
            : this("dbo")
        {
        }

        public SourceAreaEntryConfiguration(string schema)
        {
            ToTable("SourceAreaEntry", schema);
            HasKey(x => new { x.SourceId, x.AreaId });

            Property(x => x.SourceId).HasColumnName(@"SourceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AreaId).HasColumnName(@"AreaId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EntryPoint).HasColumnName(@"EntryPoint").HasColumnType("varchar(max)").IsRequired().IsUnicode(false);
            Property(x => x.SourceUriOverride).HasColumnName(@"SourceUriOverride").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);

            // Foreign keys
            HasRequired(a => a.Area).WithMany(b => b.SourceAreaEntries).HasForeignKey(c => c.AreaId); // FK_SourceAreaEntry_AreaId
            HasRequired(a => a.Source).WithMany(b => b.SourceAreaEntries).HasForeignKey(c => c.SourceId); // FK_SourceAreaEntry_SourceId
        }
    }

    // Subscriber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class SubscriberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Subscriber>
    {
        public SubscriberConfiguration()
            : this("dbo")
        {
        }

        public SubscriberConfiguration(string schema)
        {
            ToTable("Subscriber", schema);
            HasKey(x => x.SubscriberId);

            Property(x => x.SubscriberId).HasColumnName(@"SubscriberId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(254);
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
        }
    }

    // TargetField
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TargetFieldConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TargetField>
    {
        public TargetFieldConfiguration()
            : this("dbo")
        {
        }

        public TargetFieldConfiguration(string schema)
        {
            ToTable("TargetField", schema);
            HasKey(x => x.TargetId);

            Property(x => x.TargetId).HasColumnName(@"TargetId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(64);
            Property(x => x.FieldTypeId).HasColumnName(@"FieldTypeId").HasColumnType("int").IsRequired();
            Property(x => x.IsTemporaryField).HasColumnName(@"IsTemporaryField").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.TargetFieldType).WithMany(b => b.TargetFields).HasForeignKey(c => c.FieldTypeId).WillCascadeOnDelete(false); // FK_TargetField_FieldTypeId
        }
    }

    // TargetFieldType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TargetFieldTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TargetFieldType>
    {
        public TargetFieldTypeConfiguration()
            : this("dbo")
        {
        }

        public TargetFieldTypeConfiguration(string schema)
        {
            ToTable("TargetFieldType", schema);
            HasKey(x => x.FieldTypeId);

            Property(x => x.FieldTypeId).HasColumnName(@"FieldTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32);
        }
    }

    // TargetValue
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TargetValueConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TargetValue>
    {
        public TargetValueConfiguration()
            : this("dbo")
        {
        }

        public TargetValueConfiguration(string schema)
        {
            ToTable("TargetValue", schema);
            HasKey(x => x.ValueId);

            Property(x => x.ValueId).HasColumnName(@"ValueId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RecordId).HasColumnName(@"RecordId").HasColumnType("int").IsRequired();
            Property(x => x.TargetId).HasColumnName(@"TargetId").HasColumnType("int").IsRequired();
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsRequired();

            // Foreign keys
            HasRequired(a => a.ScrapeRecord).WithMany(b => b.TargetValues).HasForeignKey(c => c.RecordId).WillCascadeOnDelete(false); // FK_FieldValue_RecordId
            HasRequired(a => a.TargetField).WithMany(b => b.TargetValues).HasForeignKey(c => c.TargetId).WillCascadeOnDelete(false); // FK_FieldValue_TargetId
        }
    }

    // Template
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TemplateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Template>
    {
        public TemplateConfiguration()
            : this("dbo")
        {
        }

        public TemplateConfiguration(string schema)
        {
            ToTable("Template", schema);
            HasKey(x => x.TemplateId);

            Property(x => x.TemplateId).HasColumnName(@"TemplateId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SourceId).HasColumnName(@"SourceId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(128);
            Property(x => x.IsTopLevel).HasColumnName(@"IsTopLevel").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.Source).WithMany(b => b.Templates).HasForeignKey(c => c.SourceId).WillCascadeOnDelete(false); // FK_Template_SourceId
            HasMany(t => t.Templates_TemplateId).WithMany(t => t.Parent).Map(m =>
            {
                m.ToTable("TemplateParent", "dbo");
                m.MapLeftKey("ParentId");
                m.MapRightKey("TemplateId");
            });
        }
    }

    // TemplateField
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class TemplateFieldConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TemplateField>
    {
        public TemplateFieldConfiguration()
            : this("dbo")
        {
        }

        public TemplateFieldConfiguration(string schema)
        {
            ToTable("TemplateField", schema);
            HasKey(x => x.TemplateFieldId);

            Property(x => x.TemplateFieldId).HasColumnName(@"TemplateFieldId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TemplateId).HasColumnName(@"TemplateId").HasColumnType("int").IsRequired();
            Property(x => x.TargetId).HasColumnName(@"TargetId").HasColumnType("int").IsRequired();
            Property(x => x.OrderIndex).HasColumnName(@"OrderIndex").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.TargetField).WithMany(b => b.TemplateFields).HasForeignKey(c => c.TargetId).WillCascadeOnDelete(false); // FK_TemplateField_TargetId
            HasRequired(a => a.Template).WithMany(b => b.TemplateFields).HasForeignKey(c => c.TemplateId).WillCascadeOnDelete(false); // FK_TemplateField_TemplateId
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(32);
            Property(x => x.Hash).HasColumnName(@"Hash").HasColumnType("varbinary").IsRequired().HasMaxLength(64);
            Property(x => x.Salt).HasColumnName(@"Salt").HasColumnType("varbinary").IsRequired().HasMaxLength(128);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(254);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(13);
            Property(x => x.DayToCharge).HasColumnName(@"DayToCharge").HasColumnType("tinyint").IsRequired();
            Property(x => x.CurrentPaymentMethodId).HasColumnName(@"CurrentPaymentMethodId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.UserPaymentMethod).WithMany(b => b.Users).HasForeignKey(c => c.CurrentPaymentMethodId).WillCascadeOnDelete(false); // FK_User_CurrentPaymentMethodId
        }
    }

    // UserArea
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserAreaConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserArea>
    {
        public UserAreaConfiguration()
            : this("dbo")
        {
        }

        public UserAreaConfiguration(string schema)
        {
            ToTable("UserArea", schema);
            HasKey(x => x.UserAreaId);

            Property(x => x.UserAreaId).HasColumnName(@"UserAreaId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.AreaId).HasColumnName(@"AreaId").HasColumnType("int").IsRequired();
            Property(x => x.AddedOn).HasColumnName(@"AddedOn").HasColumnType("datetimeoffset").IsRequired();

            // Foreign keys
            HasRequired(a => a.Area).WithMany(b => b.UserAreas).HasForeignKey(c => c.AreaId); // FK_UserArea_AreaId
            HasRequired(a => a.User).WithMany(b => b.UserAreas).HasForeignKey(c => c.UserId); // FK_UserArea_UserId
        }
    }

    // UserPaymentMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserPaymentMethodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserPaymentMethod>
    {
        public UserPaymentMethodConfiguration()
            : this("dbo")
        {
        }

        public UserPaymentMethodConfiguration(string schema)
        {
            ToTable("UserPaymentMethod", schema);
            HasKey(x => x.UserPaymentMethodId);

            Property(x => x.UserPaymentMethodId).HasColumnName(@"UserPaymentMethodId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.NameOnCard).HasColumnName(@"NameOnCard").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.CreditCardNumber).HasColumnName(@"CreditCardNumber").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(16);
            Property(x => x.ExpMonth).HasColumnName(@"ExpMonth").HasColumnType("tinyint").IsRequired();
            Property(x => x.ExpYear).HasColumnName(@"ExpYear").HasColumnType("smallint").IsRequired();

            // Foreign keys
            HasRequired(a => a.User).WithMany(b => b.UserPaymentMethods).HasForeignKey(c => c.UserId); // FK_UserPaymentMethod_UserId
        }
    }

    // UserSuggestion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.26.0.0")]
    public class UserSuggestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserSuggestion>
    {
        public UserSuggestionConfiguration()
            : this("dbo")
        {
        }

        public UserSuggestionConfiguration(string schema)
        {
            ToTable("UserSuggestion", schema);
            HasKey(x => x.UserSuggestionId);

            Property(x => x.UserSuggestionId).HasColumnName(@"UserSuggestionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.ZipCode).HasColumnName(@"ZipCode").HasColumnType("int").IsRequired();
            Property(x => x.SuggestedOn).HasColumnName(@"SuggestedOn").HasColumnType("datetimeoffset").IsRequired();
            Property(x => x.FulfilledOn).HasColumnName(@"FulfilledOn").HasColumnType("datetimeoffset").IsOptional();

            // Foreign keys
            HasRequired(a => a.User).WithMany(b => b.UserSuggestions).HasForeignKey(c => c.UserId); // FK_UserSuggestion_UserId
        }
    }

    #endregion

}
// </auto-generated>

